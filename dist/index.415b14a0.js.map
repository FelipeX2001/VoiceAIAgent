{"mappings":"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","sources":["<anon>","public/index.js","node_modules/@11labs/client/dist/lib.module.js","node_modules/@11labs/client/src/utils/audio.ts","node_modules/@11labs/client/src/utils/rawAudioProcessor.ts","node_modules/@11labs/client/src/utils/input.ts","node_modules/@11labs/client/src/utils/audioConcatProcessor.ts","node_modules/@11labs/client/src/utils/output.ts","node_modules/@11labs/client/src/utils/events.ts","node_modules/@11labs/client/src/utils/connection.ts","node_modules/@11labs/client/src/index.ts","node_modules/process/browser.js"],"sourcesContent":["// index.js\nvar $cfae44f0dfdf62c0$exports = {};\n// shim for using process in browser\nvar $cfae44f0dfdf62c0$var$process = $cfae44f0dfdf62c0$exports = {};\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar $cfae44f0dfdf62c0$var$cachedSetTimeout;\nvar $cfae44f0dfdf62c0$var$cachedClearTimeout;\nfunction $cfae44f0dfdf62c0$var$defaultSetTimout() {\n    throw new Error(\"setTimeout has not been defined\");\n}\nfunction $cfae44f0dfdf62c0$var$defaultClearTimeout() {\n    throw new Error(\"clearTimeout has not been defined\");\n}\n(function() {\n    try {\n        if (typeof setTimeout === \"function\") $cfae44f0dfdf62c0$var$cachedSetTimeout = setTimeout;\n        else $cfae44f0dfdf62c0$var$cachedSetTimeout = $cfae44f0dfdf62c0$var$defaultSetTimout;\n    } catch (e) {\n        $cfae44f0dfdf62c0$var$cachedSetTimeout = $cfae44f0dfdf62c0$var$defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === \"function\") $cfae44f0dfdf62c0$var$cachedClearTimeout = clearTimeout;\n        else $cfae44f0dfdf62c0$var$cachedClearTimeout = $cfae44f0dfdf62c0$var$defaultClearTimeout;\n    } catch (e) {\n        $cfae44f0dfdf62c0$var$cachedClearTimeout = $cfae44f0dfdf62c0$var$defaultClearTimeout;\n    }\n})();\nfunction $cfae44f0dfdf62c0$var$runTimeout(fun) {\n    if ($cfae44f0dfdf62c0$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n    // if setTimeout wasn't available but was latter defined\n    if (($cfae44f0dfdf62c0$var$cachedSetTimeout === $cfae44f0dfdf62c0$var$defaultSetTimout || !$cfae44f0dfdf62c0$var$cachedSetTimeout) && setTimeout) {\n        $cfae44f0dfdf62c0$var$cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $cfae44f0dfdf62c0$var$cachedSetTimeout(fun, 0);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return $cfae44f0dfdf62c0$var$cachedSetTimeout.call(null, fun, 0);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return $cfae44f0dfdf62c0$var$cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n}\nfunction $cfae44f0dfdf62c0$var$runClearTimeout(marker) {\n    if ($cfae44f0dfdf62c0$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations\n    return clearTimeout(marker);\n    // if clearTimeout wasn't available but was latter defined\n    if (($cfae44f0dfdf62c0$var$cachedClearTimeout === $cfae44f0dfdf62c0$var$defaultClearTimeout || !$cfae44f0dfdf62c0$var$cachedClearTimeout) && clearTimeout) {\n        $cfae44f0dfdf62c0$var$cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return $cfae44f0dfdf62c0$var$cachedClearTimeout(marker);\n    } catch (e) {\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return $cfae44f0dfdf62c0$var$cachedClearTimeout.call(null, marker);\n        } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return $cfae44f0dfdf62c0$var$cachedClearTimeout.call(this, marker);\n        }\n    }\n}\nvar $cfae44f0dfdf62c0$var$queue = [];\nvar $cfae44f0dfdf62c0$var$draining = false;\nvar $cfae44f0dfdf62c0$var$currentQueue;\nvar $cfae44f0dfdf62c0$var$queueIndex = -1;\nfunction $cfae44f0dfdf62c0$var$cleanUpNextTick() {\n    if (!$cfae44f0dfdf62c0$var$draining || !$cfae44f0dfdf62c0$var$currentQueue) return;\n    $cfae44f0dfdf62c0$var$draining = false;\n    if ($cfae44f0dfdf62c0$var$currentQueue.length) $cfae44f0dfdf62c0$var$queue = $cfae44f0dfdf62c0$var$currentQueue.concat($cfae44f0dfdf62c0$var$queue);\n    else $cfae44f0dfdf62c0$var$queueIndex = -1;\n    if ($cfae44f0dfdf62c0$var$queue.length) $cfae44f0dfdf62c0$var$drainQueue();\n}\nfunction $cfae44f0dfdf62c0$var$drainQueue() {\n    if ($cfae44f0dfdf62c0$var$draining) return;\n    var timeout = $cfae44f0dfdf62c0$var$runTimeout($cfae44f0dfdf62c0$var$cleanUpNextTick);\n    $cfae44f0dfdf62c0$var$draining = true;\n    var len = $cfae44f0dfdf62c0$var$queue.length;\n    while(len){\n        $cfae44f0dfdf62c0$var$currentQueue = $cfae44f0dfdf62c0$var$queue;\n        $cfae44f0dfdf62c0$var$queue = [];\n        while(++$cfae44f0dfdf62c0$var$queueIndex < len)if ($cfae44f0dfdf62c0$var$currentQueue) $cfae44f0dfdf62c0$var$currentQueue[$cfae44f0dfdf62c0$var$queueIndex].run();\n        $cfae44f0dfdf62c0$var$queueIndex = -1;\n        len = $cfae44f0dfdf62c0$var$queue.length;\n    }\n    $cfae44f0dfdf62c0$var$currentQueue = null;\n    $cfae44f0dfdf62c0$var$draining = false;\n    $cfae44f0dfdf62c0$var$runClearTimeout(timeout);\n}\n$cfae44f0dfdf62c0$var$process.nextTick = function(fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];\n    $cfae44f0dfdf62c0$var$queue.push(new $cfae44f0dfdf62c0$var$Item(fun, args));\n    if ($cfae44f0dfdf62c0$var$queue.length === 1 && !$cfae44f0dfdf62c0$var$draining) $cfae44f0dfdf62c0$var$runTimeout($cfae44f0dfdf62c0$var$drainQueue);\n};\n// v8 likes predictible objects\nfunction $cfae44f0dfdf62c0$var$Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\n$cfae44f0dfdf62c0$var$Item.prototype.run = function() {\n    this.fun.apply(null, this.array);\n};\n$cfae44f0dfdf62c0$var$process.title = \"browser\";\n$cfae44f0dfdf62c0$var$process.browser = true;\n$cfae44f0dfdf62c0$var$process.env = {};\n$cfae44f0dfdf62c0$var$process.argv = [];\n$cfae44f0dfdf62c0$var$process.version = \"\"; // empty string to avoid regexp issues\n$cfae44f0dfdf62c0$var$process.versions = {};\nfunction $cfae44f0dfdf62c0$var$noop() {}\n$cfae44f0dfdf62c0$var$process.on = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.addListener = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.once = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.off = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.removeListener = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.removeAllListeners = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.emit = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.prependListener = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.prependOnceListener = $cfae44f0dfdf62c0$var$noop;\n$cfae44f0dfdf62c0$var$process.listeners = function(name) {\n    return [];\n};\n$cfae44f0dfdf62c0$var$process.binding = function(name) {\n    throw new Error(\"process.binding is not supported\");\n};\n$cfae44f0dfdf62c0$var$process.cwd = function() {\n    return \"/\";\n};\n$cfae44f0dfdf62c0$var$process.chdir = function(dir) {\n    throw new Error(\"process.chdir is not supported\");\n};\n$cfae44f0dfdf62c0$var$process.umask = function() {\n    return 0;\n};\n\n\nfunction $ee5c819c8591c8f0$var$e() {\n    return $ee5c819c8591c8f0$var$e = Object.assign ? Object.assign.bind() : function(e) {\n        for(var t = 1; t < arguments.length; t++){\n            var n = arguments[t];\n            for(var r in n)({}).hasOwnProperty.call(n, r) && (e[r] = n[r]);\n        }\n        return e;\n    }, $ee5c819c8591c8f0$var$e.apply(null, arguments);\n}\nfunction $ee5c819c8591c8f0$var$t(e) {\n    for(var t = window.atob(e), n = t.length, r = new Uint8Array(n), o = 0; o < n; o++)r[o] = t.charCodeAt(o);\n    return r.buffer;\n}\nvar $ee5c819c8591c8f0$var$n = new Blob([\n    '\\n      const TARGET_SAMPLE_RATE = 16000;\\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffer = []; // Initialize an empty buffer\\n          this.bufferSize = TARGET_SAMPLE_RATE / 4; // Define the threshold for buffer size to be ~0.25s\\n\\n          if (globalThis.LibSampleRate && sampleRate !== TARGET_SAMPLE_RATE) {\\n            globalThis.LibSampleRate.create(1, sampleRate, TARGET_SAMPLE_RATE).then(resampler => {\\n              this.resampler = resampler;\\n            });\\n          }\\n        }\\n        process(inputs, outputs) {\\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = new Float32Array(this.buffer)\\n              let pcm16Array = new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n            \\n                // Scale the sample to the range [-32768, 32767] and store it in the Int16Array\\n                pcm16Array[i] = sample < 0 ? sample * 32768 : sample * 32767;\\n              }\\n            \\n              // Send the buffered data to the main script\\n              this.port.postMessage([pcm16Array, maxVolume]);\\n            \\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '\n], {\n    type: \"application/javascript\"\n}), $ee5c819c8591c8f0$var$r = URL.createObjectURL($ee5c819c8591c8f0$var$n), $ee5c819c8591c8f0$var$o = /*#__PURE__*/ function() {\n    function e(e, t, n, r) {\n        this.context = void 0, this.analyser = void 0, this.worklet = void 0, this.inputStream = void 0, this.context = e, this.analyser = t, this.worklet = n, this.inputStream = r;\n    }\n    return e.create = function(t) {\n        try {\n            var n = null, o = null;\n            return Promise.resolve(function(s, i) {\n                try {\n                    var a = function() {\n                        function s() {\n                            return Promise.resolve(n.audioWorklet.addModule($ee5c819c8591c8f0$var$r)).then(function() {\n                                return Promise.resolve(navigator.mediaDevices.getUserMedia({\n                                    audio: {\n                                        sampleRate: {\n                                            ideal: t\n                                        },\n                                        echoCancellation: {\n                                            ideal: !0\n                                        }\n                                    }\n                                })).then(function(t) {\n                                    var r = n.createMediaStreamSource(o = t), s = new AudioWorkletNode(n, \"raw-audio-processor\");\n                                    return r.connect(a), a.connect(s), new e(n, a, s, o);\n                                });\n                            });\n                        }\n                        var i = navigator.mediaDevices.getSupportedConstraints().sampleRate, a = (n = new window.AudioContext(i ? {\n                            sampleRate: t\n                        } : {})).createAnalyser(), u = function() {\n                            if (!i) return Promise.resolve(n.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\")).then(function() {});\n                        }();\n                        return u && u.then ? u.then(s) : s();\n                    }();\n                } catch (e) {\n                    return i(e);\n                }\n                return a && a.then ? a.then(void 0, i) : a;\n            }(0, function(e) {\n                var t, r;\n                throw null == (t = o) || t.getTracks().forEach(function(e) {\n                    return e.stop();\n                }), null == (r = n) || r.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e.prototype.close = function() {\n        try {\n            return this.inputStream.getTracks().forEach(function(e) {\n                return e.stop();\n            }), Promise.resolve(this.context.close()).then(function() {});\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e;\n}(), $ee5c819c8591c8f0$var$s = new Blob([\n    '\\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n\\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(new Int16Array(data.buffer));\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            output[i] = this.currentBuffer[this.cursor] / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '\n], {\n    type: \"application/javascript\"\n}), $ee5c819c8591c8f0$var$i = URL.createObjectURL($ee5c819c8591c8f0$var$s), $ee5c819c8591c8f0$var$a = /*#__PURE__*/ function() {\n    function e(e, t, n, r) {\n        this.context = void 0, this.analyser = void 0, this.gain = void 0, this.worklet = void 0, this.context = e, this.analyser = t, this.gain = n, this.worklet = r;\n    }\n    return e.create = function(t) {\n        try {\n            var n = null;\n            return Promise.resolve(function(r, o) {\n                try {\n                    var s = (a = (n = new AudioContext({\n                        sampleRate: t\n                    })).createAnalyser(), (u = n.createGain()).connect(a), a.connect(n.destination), Promise.resolve(n.audioWorklet.addModule($ee5c819c8591c8f0$var$i)).then(function() {\n                        var t = new AudioWorkletNode(n, \"audio-concat-processor\");\n                        return t.connect(u), new e(n, a, u, t);\n                    }));\n                } catch (e) {\n                    return o(e);\n                }\n                var a, u;\n                return s && s.then ? s.then(void 0, o) : s;\n            }(0, function(e) {\n                var t;\n                throw null == (t = n) || t.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e.prototype.close = function() {\n        try {\n            return Promise.resolve(this.context.close()).then(function() {});\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e;\n}();\nfunction $ee5c819c8591c8f0$var$u(e) {\n    return !!e.type;\n}\nvar $ee5c819c8591c8f0$var$c = /*#__PURE__*/ function() {\n    function e(e, t, n) {\n        this.socket = void 0, this.conversationId = void 0, this.sampleRate = void 0, this.socket = e, this.conversationId = t, this.sampleRate = n;\n    }\n    return e.create = function(t) {\n        try {\n            var n = null;\n            return Promise.resolve(function(r, o) {\n                try {\n                    var s = (c = null != (i = \"undefined\" != typeof $cfae44f0dfdf62c0$exports ? undefined : null) ? i : \"wss://api.elevenlabs.io\", l = null != (a = \"undefined\" != typeof $cfae44f0dfdf62c0$exports ? undefined : null) ? a : \"/v1/convai/conversation?agent_id=\", n = new WebSocket(t.signedUrl ? t.signedUrl : c + l + t.agentId), Promise.resolve(new Promise(function(e, t) {\n                        n.addEventListener(\"error\", t), n.addEventListener(\"close\", t), n.addEventListener(\"message\", function(t) {\n                            var n = JSON.parse(t.data);\n                            $ee5c819c8591c8f0$var$u(n) && (\"conversation_initiation_metadata\" === n.type ? e(n.conversation_initiation_metadata_event) : console.warn(\"First received message is not conversation metadata.\"));\n                        }, {\n                            once: !0\n                        });\n                    })).then(function(t) {\n                        var r = t.conversation_id, o = parseInt(t.agent_output_audio_format.replace(\"pcm_\", \"\"));\n                        return new e(n, r, o);\n                    }));\n                } catch (e) {\n                    return o(e);\n                }\n                var i, a, c, l;\n                return s && s.then ? s.then(void 0, o) : s;\n            }(0, function(e) {\n                var t;\n                throw null == (t = n) || t.close(), e;\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, e.prototype.close = function() {\n        this.socket.close();\n    }, e;\n}(), $ee5c819c8591c8f0$var$l = {\n    onConnect: function() {},\n    onDisconnect: function() {},\n    onError: function() {},\n    onDebug: function() {},\n    onMessage: function() {},\n    onStatusChange: function() {},\n    onModeChange: function() {}\n}, $ee5c819c8591c8f0$export$8e86b22308382a1 = /*#__PURE__*/ function() {\n    function n(e, n, r, o) {\n        var s = this, i = this, a = this, c = this;\n        this.options = void 0, this.connection = void 0, this.input = void 0, this.output = void 0, this.lastInterruptTimestamp = 0, this.mode = \"listening\", this.status = \"connecting\", this.inputFrequencyData = void 0, this.outputFrequencyData = void 0, this.volume = 1, this.endSession = function() {\n            try {\n                return \"connected\" !== i.status ? Promise.resolve() : (i.updateStatus(\"disconnecting\"), i.connection.close(), Promise.resolve(i.input.close()).then(function() {\n                    return Promise.resolve(i.output.close()).then(function() {\n                        i.updateStatus(\"disconnected\");\n                    });\n                }));\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.updateMode = function(e) {\n            e !== s.mode && (s.mode = e, s.options.onModeChange({\n                mode: e\n            }));\n        }, this.updateStatus = function(e) {\n            e !== s.status && (s.status = e, s.options.onStatusChange({\n                status: e\n            }));\n        }, this.onEvent = function(e) {\n            try {\n                var t = JSON.parse(e.data);\n                if (!$ee5c819c8591c8f0$var$u(t)) return;\n                switch(t.type){\n                    case \"interruption\":\n                        t.interruption_event && (s.lastInterruptTimestamp = t.interruption_event.event_id), s.fadeOutAudio();\n                        break;\n                    case \"agent_response\":\n                        s.options.onMessage({\n                            source: \"ai\",\n                            message: t.agent_response_event.agent_response\n                        });\n                        break;\n                    case \"user_transcript\":\n                        s.options.onMessage({\n                            source: \"user\",\n                            message: t.user_transcription_event.user_transcript\n                        });\n                        break;\n                    case \"internal_tentative_agent_response\":\n                        s.options.onDebug({\n                            type: \"tentative_agent_response\",\n                            response: t.tentative_agent_response_internal_event.tentative_agent_response\n                        });\n                        break;\n                    case \"audio\":\n                        s.lastInterruptTimestamp <= t.audio_event.event_id && (s.addAudioBase64Chunk(t.audio_event.audio_base_64), s.updateMode(\"speaking\"));\n                        break;\n                    case \"ping\":\n                        s.connection.socket.send(JSON.stringify({\n                            type: \"pong\",\n                            event_id: t.ping_event.event_id\n                        }));\n                        break;\n                    default:\n                        s.options.onDebug(t);\n                }\n            } catch (t) {\n                return void s.onError(\"Failed to parse event data\", {\n                    event: e\n                });\n            }\n        }, this.onInputWorkletMessage = function(e) {\n            var t, n, r = JSON.stringify({\n                user_audio_chunk: (t = e.data[0].buffer, n = new Uint8Array(t), window.btoa(String.fromCharCode.apply(String, n)))\n            });\n            \"connected\" === s.status && s.connection.socket.send(r);\n        }, this.onOutputWorkletMessage = function(e) {\n            var t = e.data;\n            \"process\" === t.type && s.updateMode(t.finished ? \"listening\" : \"speaking\");\n        }, this.addAudioBase64Chunk = function(e) {\n            try {\n                return a.output.gain.gain.value = a.volume, a.output.worklet.port.postMessage({\n                    type: \"clearInterrupted\"\n                }), a.output.worklet.port.postMessage({\n                    type: \"buffer\",\n                    buffer: $ee5c819c8591c8f0$var$t(e)\n                }), Promise.resolve();\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.fadeOutAudio = function() {\n            try {\n                return c.updateMode(\"listening\"), c.output.worklet.port.postMessage({\n                    type: \"interrupt\"\n                }), c.output.gain.gain.exponentialRampToValueAtTime(1e-4, c.output.context.currentTime + 2), setTimeout(function() {\n                    c.output.gain.gain.value = c.volume, c.output.worklet.port.postMessage({\n                        type: \"clearInterrupted\"\n                    });\n                }, 2e3), Promise.resolve();\n            } catch (e) {\n                return Promise.reject(e);\n            }\n        }, this.onError = function(e, t) {\n            console.error(e, t), s.options.onError(e, t);\n        }, this.calculateVolume = function(e) {\n            if (0 === e.length) return 0;\n            for(var t = 0, n = 0; n < e.length; n++)t += e[n] / 255;\n            return (t /= e.length) < 0 ? 0 : t > 1 ? 1 : t;\n        }, this.getId = function() {\n            return s.connection.conversationId;\n        }, this.setVolume = function(e) {\n            s.volume = e.volume;\n        }, this.getInputByteFrequencyData = function() {\n            return null != s.inputFrequencyData || (s.inputFrequencyData = new Uint8Array(s.input.analyser.frequencyBinCount)), s.input.analyser.getByteFrequencyData(s.inputFrequencyData), s.inputFrequencyData;\n        }, this.getOutputByteFrequencyData = function() {\n            return null != s.outputFrequencyData || (s.outputFrequencyData = new Uint8Array(s.output.analyser.frequencyBinCount)), s.output.analyser.getByteFrequencyData(s.outputFrequencyData), s.outputFrequencyData;\n        }, this.getInputVolume = function() {\n            return s.calculateVolume(s.getInputByteFrequencyData());\n        }, this.getOutputVolume = function() {\n            return s.calculateVolume(s.getOutputByteFrequencyData());\n        }, this.options = e, this.connection = n, this.input = r, this.output = o, this.options.onConnect({\n            conversationId: n.conversationId\n        }), this.connection.socket.addEventListener(\"message\", function(e) {\n            s.onEvent(e);\n        }), this.connection.socket.addEventListener(\"error\", function(e) {\n            s.updateStatus(\"disconnected\"), s.onError(\"Socket error\", e);\n        }), this.connection.socket.addEventListener(\"close\", function() {\n            s.updateStatus(\"disconnected\"), s.options.onDisconnect();\n        }), this.input.worklet.port.onmessage = this.onInputWorkletMessage, this.output.worklet.port.onmessage = this.onOutputWorkletMessage, this.updateStatus(\"connected\");\n    }\n    return n.startSession = function(t) {\n        try {\n            var r = $ee5c819c8591c8f0$var$e({}, $ee5c819c8591c8f0$var$l, t);\n            r.onStatusChange({\n                status: \"connecting\"\n            });\n            var s = null, i = null, u = null;\n            return Promise.resolve(function(e, l) {\n                try {\n                    var h = Promise.resolve($ee5c819c8591c8f0$var$o.create(16e3)).then(function(e) {\n                        return s = e, Promise.resolve($ee5c819c8591c8f0$var$c.create(t)).then(function(e) {\n                            return i = e, Promise.resolve($ee5c819c8591c8f0$var$a.create(i.sampleRate)).then(function(e) {\n                                return new n(r, i, s, u = e);\n                            });\n                        });\n                    });\n                } catch (e) {\n                    return l(e);\n                }\n                return h && h.then ? h.then(void 0, l) : h;\n            }(0, function(e) {\n                var t, n;\n                return r.onStatusChange({\n                    status: \"disconnected\"\n                }), null == (t = i) || t.close(), Promise.resolve(null == (n = s) ? void 0 : n.close()).then(function() {\n                    var t;\n                    return Promise.resolve(null == (t = u) ? void 0 : t.close()).then(function() {\n                        throw e;\n                    });\n                });\n            }));\n        } catch (e) {\n            return Promise.reject(e);\n        }\n    }, n;\n}();\n\n\n// Obtener elementos del DOM\nconst $bb7131de8fd96889$var$botonIniciar = document.getElementById(\"iniciar\");\nconst $bb7131de8fd96889$var$botonTerminar = document.getElementById(\"terminar\");\nconst $bb7131de8fd96889$var$mensajesDiv = document.getElementById(\"mensajes\");\nlet $bb7131de8fd96889$var$conversation;\n// Función para agregar mensajes al contenedor\nfunction $bb7131de8fd96889$var$agregarMensaje(mensaje, tipo = \"default\") {\n    console.log(`Agregando mensaje: \"${mensaje}\" con tipo \"${tipo}\"`);\n    const p = document.createElement(\"p\");\n    p.textContent = mensaje;\n    // Asignar la clase basada en el tipo de mensaje\n    switch(tipo){\n        case \"user\":\n            p.classList.add(\"user\");\n            break;\n        case \"agent\":\n            p.classList.add(\"agent\");\n            break;\n        case \"system\":\n            p.classList.add(\"system\");\n            break;\n        case \"error\":\n            p.classList.add(\"error\");\n            break;\n        case \"tentativo\":\n            p.classList.add(\"tentativo\");\n            break;\n        default:\n            p.classList.add(\"default\");\n            break;\n    }\n    $bb7131de8fd96889$var$mensajesDiv.appendChild(p);\n    $bb7131de8fd96889$var$mensajesDiv.scrollTop = $bb7131de8fd96889$var$mensajesDiv.scrollHeight; // Auto scroll\n}\n// Función para manejar mensajes tentativos\nfunction $bb7131de8fd96889$var$manejarMensajeTentativo(message) {\n    console.log(\"Manejando mensaje tentativo:\", message.text);\n    // Buscar si ya existe un mensaje tentativo para actualizarlo\n    let tentativo = $bb7131de8fd96889$var$mensajesDiv.querySelector(\".tentativo\");\n    if (!tentativo) {\n        tentativo = document.createElement(\"p\");\n        tentativo.classList.add(\"tentativo\");\n        tentativo.textContent = message.text;\n        $bb7131de8fd96889$var$mensajesDiv.appendChild(tentativo);\n        console.log(\"Mensaje tentativo creado:\", tentativo.textContent);\n    } else {\n        tentativo.textContent = message.text;\n        console.log(\"Mensaje tentativo actualizado:\", tentativo.textContent);\n    }\n    $bb7131de8fd96889$var$mensajesDiv.scrollTop = $bb7131de8fd96889$var$mensajesDiv.scrollHeight; // Auto scroll\n}\n// Manejar el clic en el botón de iniciar conversación\n$bb7131de8fd96889$var$botonIniciar.addEventListener(\"click\", async ()=>{\n    try {\n        // Solicitar permiso para usar el micrófono\n        await navigator.mediaDevices.getUserMedia({\n            audio: true\n        });\n        console.log(\"Permiso de micr\\xf3fono otorgado.\");\n        $bb7131de8fd96889$var$botonIniciar.disabled = true;\n        $bb7131de8fd96889$var$botonTerminar.disabled = false;\n        // Iniciar la conversación\n        $bb7131de8fd96889$var$conversation = await (0, $ee5c819c8591c8f0$export$8e86b22308382a1).startSession({\n            agentId: \"rhAH8UxD3uR19kPtEdmq\",\n            onConnect: ()=>{\n                console.log(\"Conectado al agente.\");\n                $bb7131de8fd96889$var$agregarMensaje(\"Conectado al agente.\", \"system\");\n            },\n            onDisconnect: ()=>{\n                console.log(\"Desconectado del agente.\");\n                $bb7131de8fd96889$var$agregarMensaje(\"Desconectado del agente.\", \"system\");\n            },\n            onMessage: (message)=>{\n                console.log(\"Mensaje recibido:\", message);\n                if (message.isFinal) {\n                    // Eliminar mensaje tentativo si existe\n                    const tentativo = $bb7131de8fd96889$var$mensajesDiv.querySelector(\".tentativo\");\n                    if (tentativo) {\n                        tentativo.remove();\n                        console.log(\"Mensaje tentativo eliminado.\");\n                    }\n                    if (message.isUser) {\n                        $bb7131de8fd96889$var$agregarMensaje(`T\\xfa: ${message.text}`, \"user\");\n                        console.log(\"Mensaje de usuario agregado:\", message.text);\n                    } else {\n                        $bb7131de8fd96889$var$agregarMensaje(`Agente: ${message.text}`, \"agent\");\n                        console.log(\"Mensaje del agente agregado:\", message.text);\n                    }\n                } else // Manejar mensajes tentativos\n                $bb7131de8fd96889$var$manejarMensajeTentativo(message);\n            },\n            onError: (error)=>{\n                console.error(\"Error en la conversaci\\xf3n:\", error);\n                $bb7131de8fd96889$var$agregarMensaje(`Error: ${error.message || error}`, \"error\");\n            },\n            onStatusChange: (status)=>{\n                console.log(\"Status Change:\", status);\n                // Acceder a propiedades específicas del objeto status\n                const connected = status.connected ? \"Conectado\" : \"Desconectado\";\n                const details = status.details ? status.details : \"Sin detalles\";\n                $bb7131de8fd96889$var$agregarMensaje(`Estado de conexi\\xf3n: ${connected} - ${details}`, \"system\");\n            },\n            onModeChange: (mode)=>{\n                console.log(\"Mode Change:\", mode);\n                // Acceder a propiedades específicas del objeto mode\n                const currentMode = mode.currentMode ? mode.currentMode : \"Desconocido\";\n                $bb7131de8fd96889$var$agregarMensaje(`Modo del agente: ${currentMode}`, \"system\");\n            }\n        });\n    } catch (error) {\n        console.error(\"Error al iniciar la conversaci\\xf3n:\", error);\n        $bb7131de8fd96889$var$agregarMensaje(`No se pudo iniciar la conversaci\\xf3n: ${error.message || error}`, \"error\");\n    }\n});\n// Manejar el clic en el botón de terminar conversación\n$bb7131de8fd96889$var$botonTerminar.addEventListener(\"click\", async ()=>{\n    if ($bb7131de8fd96889$var$conversation) try {\n        await $bb7131de8fd96889$var$conversation.endSession();\n        $bb7131de8fd96889$var$agregarMensaje(\"Sesi\\xf3n finalizada.\", \"system\");\n        console.log(\"Sesi\\xf3n finalizada.\");\n    } catch (error) {\n        console.error(\"Error al terminar la sesi\\xf3n:\", error);\n        $bb7131de8fd96889$var$agregarMensaje(`Error al terminar la sesi\\xf3n: ${error.message || error}`, \"error\");\n    } finally{\n        $bb7131de8fd96889$var$botonIniciar.disabled = false;\n        $bb7131de8fd96889$var$botonTerminar.disabled = true;\n    }\n});\n\n\n//# sourceMappingURL=index.415b14a0.js.map\n","// index.js\r\n\r\nimport { Conversation } from \"@11labs/client\";\r\n\r\n// Obtener elementos del DOM\r\nconst botonIniciar = document.getElementById(\"iniciar\");\r\nconst botonTerminar = document.getElementById(\"terminar\");\r\nconst mensajesDiv = document.getElementById(\"mensajes\");\r\n\r\nlet conversation;\r\n\r\n// Función para agregar mensajes al contenedor\r\nfunction agregarMensaje(mensaje, tipo = \"default\") {\r\n  console.log(`Agregando mensaje: \"${mensaje}\" con tipo \"${tipo}\"`);\r\n  const p = document.createElement(\"p\");\r\n  p.textContent = mensaje;\r\n\r\n  // Asignar la clase basada en el tipo de mensaje\r\n  switch (tipo) {\r\n    case \"user\":\r\n      p.classList.add(\"user\");\r\n      break;\r\n    case \"agent\":\r\n      p.classList.add(\"agent\");\r\n      break;\r\n    case \"system\":\r\n      p.classList.add(\"system\");\r\n      break;\r\n    case \"error\":\r\n      p.classList.add(\"error\");\r\n      break;\r\n    case \"tentativo\":\r\n      p.classList.add(\"tentativo\");\r\n      break;\r\n    default:\r\n      p.classList.add(\"default\");\r\n      break;\r\n  }\r\n\r\n  mensajesDiv.appendChild(p);\r\n  mensajesDiv.scrollTop = mensajesDiv.scrollHeight; // Auto scroll\r\n}\r\n\r\n// Función para manejar mensajes tentativos\r\nfunction manejarMensajeTentativo(message) {\r\n  console.log(\"Manejando mensaje tentativo:\", message.text);\r\n  // Buscar si ya existe un mensaje tentativo para actualizarlo\r\n  let tentativo = mensajesDiv.querySelector(\".tentativo\");\r\n\r\n  if (!tentativo) {\r\n    tentativo = document.createElement(\"p\");\r\n    tentativo.classList.add(\"tentativo\");\r\n    tentativo.textContent = message.text;\r\n    mensajesDiv.appendChild(tentativo);\r\n    console.log(\"Mensaje tentativo creado:\", tentativo.textContent);\r\n  } else {\r\n    tentativo.textContent = message.text;\r\n    console.log(\"Mensaje tentativo actualizado:\", tentativo.textContent);\r\n  }\r\n\r\n  mensajesDiv.scrollTop = mensajesDiv.scrollHeight; // Auto scroll\r\n}\r\n\r\n// Manejar el clic en el botón de iniciar conversación\r\nbotonIniciar.addEventListener(\"click\", async () => {\r\n  try {\r\n    // Solicitar permiso para usar el micrófono\r\n    await navigator.mediaDevices.getUserMedia({ audio: true });\r\n    console.log(\"Permiso de micrófono otorgado.\");\r\n\r\n    botonIniciar.disabled = true;\r\n    botonTerminar.disabled = false;\r\n\r\n    // Iniciar la conversación\r\n    conversation = await Conversation.startSession({\r\n      agentId: \"rhAH8UxD3uR19kPtEdmq\", // Reemplaza con tu propio agentId\r\n      onConnect: () => {\r\n        console.log(\"Conectado al agente.\");\r\n        agregarMensaje(\"Conectado al agente.\", \"system\");\r\n      },\r\n      onDisconnect: () => {\r\n        console.log(\"Desconectado del agente.\");\r\n        agregarMensaje(\"Desconectado del agente.\", \"system\");\r\n      },\r\n      onMessage: (message) => {\r\n        console.log(\"Mensaje recibido:\", message);\r\n        if (message.isFinal) {\r\n          // Eliminar mensaje tentativo si existe\r\n          const tentativo = mensajesDiv.querySelector(\".tentativo\");\r\n          if (tentativo) {\r\n            tentativo.remove();\r\n            console.log(\"Mensaje tentativo eliminado.\");\r\n          }\r\n\r\n          if (message.isUser) {\r\n            agregarMensaje(`Tú: ${message.text}`, \"user\");\r\n            console.log(\"Mensaje de usuario agregado:\", message.text);\r\n          } else {\r\n            agregarMensaje(`Agente: ${message.text}`, \"agent\");\r\n            console.log(\"Mensaje del agente agregado:\", message.text);\r\n          }\r\n        } else {\r\n          // Manejar mensajes tentativos\r\n          manejarMensajeTentativo(message);\r\n        }\r\n      },\r\n      onError: (error) => {\r\n        console.error(\"Error en la conversación:\", error);\r\n        agregarMensaje(`Error: ${error.message || error}`, \"error\");\r\n      },\r\n      onStatusChange: (status) => {\r\n        console.log(\"Status Change:\", status);\r\n        // Acceder a propiedades específicas del objeto status\r\n        const connected = status.connected ? \"Conectado\" : \"Desconectado\";\r\n        const details = status.details ? status.details : \"Sin detalles\";\r\n        agregarMensaje(`Estado de conexión: ${connected} - ${details}`, \"system\");\r\n      },\r\n      onModeChange: (mode) => {\r\n        console.log(\"Mode Change:\", mode);\r\n        // Acceder a propiedades específicas del objeto mode\r\n        const currentMode = mode.currentMode ? mode.currentMode : \"Desconocido\";\r\n        agregarMensaje(`Modo del agente: ${currentMode}`, \"system\");\r\n      },\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error al iniciar la conversación:\", error);\r\n    agregarMensaje(`No se pudo iniciar la conversación: ${error.message || error}`, \"error\");\r\n  }\r\n});\r\n\r\n// Manejar el clic en el botón de terminar conversación\r\nbotonTerminar.addEventListener(\"click\", async () => {\r\n  if (conversation) {\r\n    try {\r\n      await conversation.endSession();\r\n      agregarMensaje(\"Sesión finalizada.\", \"system\");\r\n      console.log(\"Sesión finalizada.\");\r\n    } catch (error) {\r\n      console.error(\"Error al terminar la sesión:\", error);\r\n      agregarMensaje(`Error al terminar la sesión: ${error.message || error}`, \"error\");\r\n    } finally {\r\n      botonIniciar.disabled = false;\r\n      botonTerminar.disabled = true;\r\n    }\r\n  }\r\n});\r\n\r\n\r\n","function e(){return e=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},e.apply(null,arguments)}function t(e){for(var t=window.atob(e),n=t.length,r=new Uint8Array(n),o=0;o<n;o++)r[o]=t.charCodeAt(o);return r.buffer}var n=new Blob(['\\n      const TARGET_SAMPLE_RATE = 16000;\\n      class RawAudioProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffer = []; // Initialize an empty buffer\\n          this.bufferSize = TARGET_SAMPLE_RATE / 4; // Define the threshold for buffer size to be ~0.25s\\n\\n          if (globalThis.LibSampleRate && sampleRate !== TARGET_SAMPLE_RATE) {\\n            globalThis.LibSampleRate.create(1, sampleRate, TARGET_SAMPLE_RATE).then(resampler => {\\n              this.resampler = resampler;\\n            });\\n          }\\n        }\\n        process(inputs, outputs) {\\n          const input = inputs[0]; // Get the first input node\\n          if (input.length > 0) {\\n            let channelData = input[0]; // Get the first channel\\'s data\\n\\n            // Resample the audio if necessary\\n            if (this.resampler) {\\n              channelData = this.resampler.full(channelData);\\n            }\\n\\n            // Add channel data to the buffer\\n            this.buffer.push(...channelData);\\n            // Get max volume \\n            let sum = 0.0;\\n            for (let i = 0; i < channelData.length; i++) {\\n              sum += channelData[i] * channelData[i];\\n            }\\n            const maxVolume = Math.sqrt(sum / channelData.length);\\n            // Check if buffer size has reached or exceeded the threshold\\n            if (this.buffer.length >= this.bufferSize) {\\n              const float32Array = new Float32Array(this.buffer)\\n              let pcm16Array = new Int16Array(float32Array.length);\\n\\n              // Iterate through the Float32Array and convert each sample to PCM16\\n              for (let i = 0; i < float32Array.length; i++) {\\n                // Clamp the value to the range [-1, 1]\\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\\n            \\n                // Scale the sample to the range [-32768, 32767] and store it in the Int16Array\\n                pcm16Array[i] = sample < 0 ? sample * 32768 : sample * 32767;\\n              }\\n            \\n              // Send the buffered data to the main script\\n              this.port.postMessage([pcm16Array, maxVolume]);\\n            \\n              // Clear the buffer after sending\\n              this.buffer = [];\\n            }\\n          }\\n          return true; // Continue processing\\n        }\\n      }\\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\\n  '],{type:\"application/javascript\"}),r=URL.createObjectURL(n),o=/*#__PURE__*/function(){function e(e,t,n,r){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=e,this.analyser=t,this.worklet=n,this.inputStream=r}return e.create=function(t){try{var n=null,o=null;return Promise.resolve(function(s,i){try{var a=function(){function s(){return Promise.resolve(n.audioWorklet.addModule(r)).then(function(){return Promise.resolve(navigator.mediaDevices.getUserMedia({audio:{sampleRate:{ideal:t},echoCancellation:{ideal:!0}}})).then(function(t){var r=n.createMediaStreamSource(o=t),s=new AudioWorkletNode(n,\"raw-audio-processor\");return r.connect(a),a.connect(s),new e(n,a,s,o)})})}var i=navigator.mediaDevices.getSupportedConstraints().sampleRate,a=(n=new window.AudioContext(i?{sampleRate:t}:{})).createAnalyser(),u=function(){if(!i)return Promise.resolve(n.audioWorklet.addModule(\"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\")).then(function(){})}();return u&&u.then?u.then(s):s()}()}catch(e){return i(e)}return a&&a.then?a.then(void 0,i):a}(0,function(e){var t,r;throw null==(t=o)||t.getTracks().forEach(function(e){return e.stop()}),null==(r=n)||r.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){try{return this.inputStream.getTracks().forEach(function(e){return e.stop()}),Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},e}(),s=new Blob(['\\n      class AudioConcatProcessor extends AudioWorkletProcessor {\\n        constructor() {\\n          super();\\n          this.buffers = []; // Initialize an empty buffer\\n          this.cursor = 0;\\n          this.currentBuffer = null;\\n          this.wasInterrupted = false;\\n          this.finished = false;\\n\\n          this.port.onmessage = ({ data }) => {\\n            switch (data.type) {\\n              case \"buffer\":\\n                this.wasInterrupted = false;\\n                this.buffers.push(new Int16Array(data.buffer));\\n                break;\\n              case \"interrupt\":\\n                this.wasInterrupted = true;\\n                break;\\n              case \"clearInterrupted\":\\n                if (this.wasInterrupted) {\\n                  this.wasInterrupted = false;\\n                  this.buffers = [];\\n                  this.currentBuffer = null;\\n                }\\n            }\\n          };\\n        }\\n        process(_, outputs) {\\n          let finished = false;\\n          const output = outputs[0][0];\\n          for (let i = 0; i < output.length; i++) {\\n            if (!this.currentBuffer) {\\n              if (this.buffers.length === 0) {\\n                finished = true;\\n                break;\\n              }\\n              this.currentBuffer = this.buffers.shift();\\n              this.cursor = 0;\\n            }\\n\\n            output[i] = this.currentBuffer[this.cursor] / 32768;\\n            this.cursor++;\\n\\n            if (this.cursor >= this.currentBuffer.length) {\\n              this.currentBuffer = null;\\n            }\\n          }\\n\\n          if (this.finished !== finished) {\\n            this.finished = finished;\\n            this.port.postMessage({ type: \"process\", finished });\\n          }\\n\\n          return true; // Continue processing\\n        }\\n      }\\n\\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\\n    '],{type:\"application/javascript\"}),i=URL.createObjectURL(s),a=/*#__PURE__*/function(){function e(e,t,n,r){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=e,this.analyser=t,this.gain=n,this.worklet=r}return e.create=function(t){try{var n=null;return Promise.resolve(function(r,o){try{var s=(a=(n=new AudioContext({sampleRate:t})).createAnalyser(),(u=n.createGain()).connect(a),a.connect(n.destination),Promise.resolve(n.audioWorklet.addModule(i)).then(function(){var t=new AudioWorkletNode(n,\"audio-concat-processor\");return t.connect(u),new e(n,a,u,t)}))}catch(e){return o(e)}var a,u;return s&&s.then?s.then(void 0,o):s}(0,function(e){var t;throw null==(t=n)||t.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){try{return Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},e}();function u(e){return!!e.type}var c=/*#__PURE__*/function(){function e(e,t,n){this.socket=void 0,this.conversationId=void 0,this.sampleRate=void 0,this.socket=e,this.conversationId=t,this.sampleRate=n}return e.create=function(t){try{var n=null;return Promise.resolve(function(r,o){try{var s=(c=null!=(i=\"undefined\"!=typeof process?process.env.ELEVENLABS_CONVAI_SERVER_ORIGIN:null)?i:\"wss://api.elevenlabs.io\",l=null!=(a=\"undefined\"!=typeof process?process.env.ELEVENLABS_CONVAI_SERVER_PATHNAME:null)?a:\"/v1/convai/conversation?agent_id=\",n=new WebSocket(t.signedUrl?t.signedUrl:c+l+t.agentId),Promise.resolve(new Promise(function(e,t){n.addEventListener(\"error\",t),n.addEventListener(\"close\",t),n.addEventListener(\"message\",function(t){var n=JSON.parse(t.data);u(n)&&(\"conversation_initiation_metadata\"===n.type?e(n.conversation_initiation_metadata_event):console.warn(\"First received message is not conversation metadata.\"))},{once:!0})})).then(function(t){var r=t.conversation_id,o=parseInt(t.agent_output_audio_format.replace(\"pcm_\",\"\"));return new e(n,r,o)}))}catch(e){return o(e)}var i,a,c,l;return s&&s.then?s.then(void 0,o):s}(0,function(e){var t;throw null==(t=n)||t.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){this.socket.close()},e}(),l={onConnect:function(){},onDisconnect:function(){},onError:function(){},onDebug:function(){},onMessage:function(){},onStatusChange:function(){},onModeChange:function(){}},h=/*#__PURE__*/function(){function n(e,n,r,o){var s=this,i=this,a=this,c=this;this.options=void 0,this.connection=void 0,this.input=void 0,this.output=void 0,this.lastInterruptTimestamp=0,this.mode=\"listening\",this.status=\"connecting\",this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.volume=1,this.endSession=function(){try{return\"connected\"!==i.status?Promise.resolve():(i.updateStatus(\"disconnecting\"),i.connection.close(),Promise.resolve(i.input.close()).then(function(){return Promise.resolve(i.output.close()).then(function(){i.updateStatus(\"disconnected\")})}))}catch(e){return Promise.reject(e)}},this.updateMode=function(e){e!==s.mode&&(s.mode=e,s.options.onModeChange({mode:e}))},this.updateStatus=function(e){e!==s.status&&(s.status=e,s.options.onStatusChange({status:e}))},this.onEvent=function(e){try{var t=JSON.parse(e.data);if(!u(t))return;switch(t.type){case\"interruption\":t.interruption_event&&(s.lastInterruptTimestamp=t.interruption_event.event_id),s.fadeOutAudio();break;case\"agent_response\":s.options.onMessage({source:\"ai\",message:t.agent_response_event.agent_response});break;case\"user_transcript\":s.options.onMessage({source:\"user\",message:t.user_transcription_event.user_transcript});break;case\"internal_tentative_agent_response\":s.options.onDebug({type:\"tentative_agent_response\",response:t.tentative_agent_response_internal_event.tentative_agent_response});break;case\"audio\":s.lastInterruptTimestamp<=t.audio_event.event_id&&(s.addAudioBase64Chunk(t.audio_event.audio_base_64),s.updateMode(\"speaking\"));break;case\"ping\":s.connection.socket.send(JSON.stringify({type:\"pong\",event_id:t.ping_event.event_id}));break;default:s.options.onDebug(t)}}catch(t){return void s.onError(\"Failed to parse event data\",{event:e})}},this.onInputWorkletMessage=function(e){var t,n,r=JSON.stringify({user_audio_chunk:(t=e.data[0].buffer,n=new Uint8Array(t),window.btoa(String.fromCharCode.apply(String,n)))});\"connected\"===s.status&&s.connection.socket.send(r)},this.onOutputWorkletMessage=function(e){var t=e.data;\"process\"===t.type&&s.updateMode(t.finished?\"listening\":\"speaking\")},this.addAudioBase64Chunk=function(e){try{return a.output.gain.gain.value=a.volume,a.output.worklet.port.postMessage({type:\"clearInterrupted\"}),a.output.worklet.port.postMessage({type:\"buffer\",buffer:t(e)}),Promise.resolve()}catch(e){return Promise.reject(e)}},this.fadeOutAudio=function(){try{return c.updateMode(\"listening\"),c.output.worklet.port.postMessage({type:\"interrupt\"}),c.output.gain.gain.exponentialRampToValueAtTime(1e-4,c.output.context.currentTime+2),setTimeout(function(){c.output.gain.gain.value=c.volume,c.output.worklet.port.postMessage({type:\"clearInterrupted\"})},2e3),Promise.resolve()}catch(e){return Promise.reject(e)}},this.onError=function(e,t){console.error(e,t),s.options.onError(e,t)},this.calculateVolume=function(e){if(0===e.length)return 0;for(var t=0,n=0;n<e.length;n++)t+=e[n]/255;return(t/=e.length)<0?0:t>1?1:t},this.getId=function(){return s.connection.conversationId},this.setVolume=function(e){s.volume=e.volume},this.getInputByteFrequencyData=function(){return null!=s.inputFrequencyData||(s.inputFrequencyData=new Uint8Array(s.input.analyser.frequencyBinCount)),s.input.analyser.getByteFrequencyData(s.inputFrequencyData),s.inputFrequencyData},this.getOutputByteFrequencyData=function(){return null!=s.outputFrequencyData||(s.outputFrequencyData=new Uint8Array(s.output.analyser.frequencyBinCount)),s.output.analyser.getByteFrequencyData(s.outputFrequencyData),s.outputFrequencyData},this.getInputVolume=function(){return s.calculateVolume(s.getInputByteFrequencyData())},this.getOutputVolume=function(){return s.calculateVolume(s.getOutputByteFrequencyData())},this.options=e,this.connection=n,this.input=r,this.output=o,this.options.onConnect({conversationId:n.conversationId}),this.connection.socket.addEventListener(\"message\",function(e){s.onEvent(e)}),this.connection.socket.addEventListener(\"error\",function(e){s.updateStatus(\"disconnected\"),s.onError(\"Socket error\",e)}),this.connection.socket.addEventListener(\"close\",function(){s.updateStatus(\"disconnected\"),s.options.onDisconnect()}),this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage,this.updateStatus(\"connected\")}return n.startSession=function(t){try{var r=e({},l,t);r.onStatusChange({status:\"connecting\"});var s=null,i=null,u=null;return Promise.resolve(function(e,l){try{var h=Promise.resolve(o.create(16e3)).then(function(e){return s=e,Promise.resolve(c.create(t)).then(function(e){return i=e,Promise.resolve(a.create(i.sampleRate)).then(function(e){return new n(r,i,s,u=e)})})})}catch(e){return l(e)}return h&&h.then?h.then(void 0,l):h}(0,function(e){var t,n;return r.onStatusChange({status:\"disconnected\"}),null==(t=i)||t.close(),Promise.resolve(null==(n=s)?void 0:n.close()).then(function(){var t;return Promise.resolve(null==(t=u)?void 0:t.close()).then(function(){throw e})})}))}catch(e){return Promise.reject(e)}},n}();export{h as Conversation};\n//# sourceMappingURL=lib.module.js.map\n","export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","const blob = new Blob(\n  [\n    `\n      const TARGET_SAMPLE_RATE = 16000;\n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffer = []; // Initialize an empty buffer\n          this.bufferSize = TARGET_SAMPLE_RATE / 4; // Define the threshold for buffer size to be ~0.25s\n\n          if (globalThis.LibSampleRate && sampleRate !== TARGET_SAMPLE_RATE) {\n            globalThis.LibSampleRate.create(1, sampleRate, TARGET_SAMPLE_RATE).then(resampler => {\n              this.resampler = resampler;\n            });\n          }\n        }\n        process(inputs, outputs) {\n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = new Float32Array(this.buffer)\n              let pcm16Array = new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n            \n                // Scale the sample to the range [-32768, 32767] and store it in the Int16Array\n                pcm16Array[i] = sample < 0 ? sample * 32768 : sample * 32767;\n              }\n            \n              // Send the buffered data to the main script\n              this.port.postMessage([pcm16Array, maxVolume]);\n            \n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create(sampleRate: number): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: { ideal: sampleRate },\n          echoCancellation: { ideal: true },\n        },\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n}\n","const blob = new Blob(\n  [\n    `\n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n\n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(new Int16Array(data.buffer));\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            output[i] = this.currentBuffer[this.cursor] / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\n\nexport class Output {\n  public static async create(sampleRate: number): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.connect(gain);\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","export type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    average_ping_ms?: number;\n  };\n};\n\n// TODO correction missing\nexport type SocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent;\n\nexport function isValidSocketEvent(event: any): event is SocketEvent {\n  return !!event.type;\n}\n","import { ConfigEvent, isValidSocketEvent } from \"./events\";\n\ndeclare const process: {\n  env: {\n    ELEVENLABS_CONVAI_SERVER_ORIGIN?: string;\n    ELEVENLABS_CONVAI_SERVER_PATHNAME?: string;\n  };\n};\n\nexport type SessionConfig =\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined };\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin =\n        (typeof process !== \"undefined\"\n          ? process.env.ELEVENLABS_CONVAI_SERVER_ORIGIN\n          : null) ?? WSS_API_ORIGIN;\n\n      const pathname =\n        (typeof process !== \"undefined\"\n          ? process.env.ELEVENLABS_CONVAI_SERVER_PATHNAME\n          : null) ?? WSS_API_PATHNAME;\n\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + pathname + config.agentId;\n\n      socket = new WebSocket(url);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\"error\", reject);\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const conversationId = conversationConfig.conversation_id;\n      const sampleRate = parseInt(\n        conversationConfig.agent_output_audio_format.replace(\"pcm_\", \"\")\n      );\n\n      return new Connection(socket, conversationId, sampleRate);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly sampleRate: number\n  ) {}\n\n  public close() {\n    this.socket.close();\n  }\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport { Connection, SessionConfig } from \"./utils/connection\";\nimport { isValidSocketEvent, PingEvent } from \"./utils/events\";\n\nexport type { SocketEvent } from \"./utils/events\";\nexport type { SessionConfig } from \"./utils/connection\";\n\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig & Callbacks;\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  onDisconnect: () => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onError: (message: string, context?: any) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n};\n\nconst DEFAULT_SAMPLE_RATE = 16000;\n\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onDebug: () => {},\n  onMessage: () => {},\n  onStatusChange: () => {},\n  onModeChange: () => {},\n};\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig & Partial<Callbacks>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n\n    try {\n      input = await Input.create(DEFAULT_SAMPLE_RATE);\n      connection = await Connection.create(options);\n      output = await Output.create(connection.sampleRate);\n\n      return new Conversation(fullOptions, connection, input, output);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.socket.addEventListener(\"message\", event => {\n      this.onEvent(event);\n    });\n    this.connection.socket.addEventListener(\"error\", event => {\n      this.updateStatus(\"disconnected\");\n      this.onError(\"Socket error\", event);\n    });\n    this.connection.socket.addEventListener(\"close\", () => {\n      this.updateStatus(\"disconnected\");\n      this.options.onDisconnect();\n    });\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = async () => {\n    if (this.status !== \"connected\") return;\n    this.updateStatus(\"disconnecting\");\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private onEvent = (event: MessageEvent) => {\n    try {\n      const parsedEvent = JSON.parse(event.data);\n\n      if (!isValidSocketEvent(parsedEvent)) {\n        return;\n      }\n\n      switch (parsedEvent.type) {\n        case \"interruption\": {\n          if (parsedEvent.interruption_event) {\n            this.lastInterruptTimestamp =\n              parsedEvent.interruption_event.event_id;\n          }\n          this.fadeOutAudio();\n          break;\n        }\n\n        case \"agent_response\": {\n          this.options.onMessage({\n            source: \"ai\",\n            message: parsedEvent.agent_response_event.agent_response,\n          });\n          break;\n        }\n\n        case \"user_transcript\": {\n          this.options.onMessage({\n            source: \"user\",\n            message: parsedEvent.user_transcription_event.user_transcript,\n          });\n          break;\n        }\n\n        case \"internal_tentative_agent_response\": {\n          this.options.onDebug({\n            type: \"tentative_agent_response\",\n            response:\n              parsedEvent.tentative_agent_response_internal_event\n                .tentative_agent_response,\n          });\n          break;\n        }\n\n        case \"audio\": {\n          if (\n            this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id!\n          ) {\n            this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n            this.updateMode(\"speaking\");\n          }\n          break;\n        }\n\n        case \"ping\": {\n          this.connection.socket.send(\n            JSON.stringify({\n              type: \"pong\",\n              event_id: (parsedEvent as PingEvent).ping_event.event_id,\n            })\n          );\n          // parsedEvent.ping_event.average_ping_ms can be used on client side, for\n          // example to warn if ping is too high that experience might be degraded.\n          break;\n        }\n\n        // unhandled events are expected to be internal events\n        default: {\n          this.options.onDebug(parsedEvent);\n          break;\n        }\n      }\n    } catch {\n      this.onError(\"Failed to parse event data\", { event });\n      return;\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    const audioMessage = JSON.stringify({\n      user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n      //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n    });\n    if (this.status === \"connected\") {\n      this.connection.socket.send(audioMessage);\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = async (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = async () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"names":["$bb7131de8fd96889$var$conversation","$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$exports","$cfae44f0dfdf62c0$var$process","$cfae44f0dfdf62c0$var$defaultSetTimout","Error","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","e","call","clearTimeout","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","length","concat","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","$cfae44f0dfdf62c0$var$runClearTimeout","marker","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","$ee5c819c8591c8f0$var$e","Object","assign","bind","t","arguments","n","r","hasOwnProperty","apply","nextTick","args","Array","i","push","prototype","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","$ee5c819c8591c8f0$var$n","Blob","type","$ee5c819c8591c8f0$var$r","URL","createObjectURL","$ee5c819c8591c8f0$var$o","context","analyser","worklet","inputStream","create","o","Promise","resolve","s","a","audioWorklet","addModule","then","navigator","mediaDevices","getUserMedia","audio","sampleRate","ideal","echoCancellation","createMediaStreamSource","AudioWorkletNode","connect","getSupportedConstraints","window","AudioContext","createAnalyser","u","getTracks","forEach","stop","close","reject","$ee5c819c8591c8f0$var$s","$ee5c819c8591c8f0$var$i","$ee5c819c8591c8f0$var$a","gain","createGain","destination","$ee5c819c8591c8f0$var$c","socket","conversationId","c","l","undefined","WebSocket","signedUrl","agentId","addEventListener","JSON","parse","data","$ee5c819c8591c8f0$var$u","conversation_initiation_metadata_event","console","warn","conversation_id","parseInt","agent_output_audio_format","replace","$ee5c819c8591c8f0$var$l","onConnect","onDisconnect","onError","onDebug","onMessage","onStatusChange","onModeChange","$ee5c819c8591c8f0$export$8e86b22308382a1","options","connection","input","output","lastInterruptTimestamp","mode","status","inputFrequencyData","outputFrequencyData","volume","endSession","updateStatus","updateMode","onEvent","interruption_event","event_id","fadeOutAudio","source","message","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","audio_event","addAudioBase64Chunk","audio_base_64","send","stringify","ping_event","event","onInputWorkletMessage","user_audio_chunk","Uint8Array","buffer","btoa","String","fromCharCode","onOutputWorkletMessage","finished","value","port","postMessage","$ee5c819c8591c8f0$var$t","atob","charCodeAt","exponentialRampToValueAtTime","currentTime","error","calculateVolume","getId","setVolume","getInputByteFrequencyData","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","onmessage","startSession","h","$bb7131de8fd96889$var$botonIniciar","document","getElementById","$bb7131de8fd96889$var$botonTerminar","$bb7131de8fd96889$var$mensajesDiv","$bb7131de8fd96889$var$agregarMensaje","mensaje","tipo","log","p","createElement","textContent","classList","add","appendChild","scrollTop","scrollHeight","disabled","isFinal","tentativo","querySelector","remove","isUser","text","$bb7131de8fd96889$var$manejarMensajeTentativo","connected","details","currentMode","base64ToArrayBuffer","base64","binaryString","bytes","blob","rawAudioProcessor","Input","this","_temp2","_navigator$mediaDevic","supportsSampleRateConstraint","_temp","_catch","_inputStream","_context","track","_proto","audioConcatProcessor","Output","isValidSocketEvent","Connection","config","origin","_ref","process","ELEVENLABS_CONVAI_SERVER_ORIGIN","pathname","_ref2","ELEVENLABS_CONVAI_SERVER_PATHNAME","conversationConfig","_socket","defaultCallbacks","Conversation","_this2","_this","_this3","_this4","parsedEvent","_unused","b","audioMessage","chunk","frequencyData","fullOptions","_extends","_Input$create","_Connection$create","_Output$create","_connection","_input","_output"],"version":3,"file":"index.415b14a0.js.map"}