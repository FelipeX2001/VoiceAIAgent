let e;var t,n,r,o={},s=o={};function i(){throw Error("setTimeout has not been defined")}function a(){throw Error("clearTimeout has not been defined")}function u(e){if(t===setTimeout)return setTimeout(e,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(n){try{return t.call(null,e,0)}catch(n){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(e){t=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var c=[],l=!1,d=-1;function h(){l&&r&&(l=!1,r.length?c=r.concat(c):d=-1,c.length&&p())}function p(){if(!l){var e=u(h);l=!0;for(var t=c.length;t;){for(r=c,c=[];++d<t;)r&&r[d].run();d=-1,t=c.length}r=null,l=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}function v(){return(v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(null,arguments)}s.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||l||u(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=m,s.addListener=m,s.once=m,s.off=m,s.removeListener=m,s.removeAllListeners=m,s.emit=m,s.prependListener=m,s.prependOnceListener=m,s.listeners=function(e){return[]},s.binding=function(e){throw Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw Error("process.chdir is not supported")},s.umask=function(){return 0};var g=new Blob(['\n      const TARGET_SAMPLE_RATE = 16000;\n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffer = []; // Initialize an empty buffer\n          this.bufferSize = TARGET_SAMPLE_RATE / 4; // Define the threshold for buffer size to be ~0.25s\n\n          if (globalThis.LibSampleRate && sampleRate !== TARGET_SAMPLE_RATE) {\n            globalThis.LibSampleRate.create(1, sampleRate, TARGET_SAMPLE_RATE).then(resampler => {\n              this.resampler = resampler;\n            });\n          }\n        }\n        process(inputs, outputs) {\n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel\'s data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = new Float32Array(this.buffer)\n              let pcm16Array = new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n            \n                // Scale the sample to the range [-32768, 32767] and store it in the Int16Array\n                pcm16Array[i] = sample < 0 ? sample * 32768 : sample * 32767;\n              }\n            \n              // Send the buffered data to the main script\n              this.port.postMessage([pcm16Array, maxVolume]);\n            \n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor("raw-audio-processor", RawAudioProcessor);\n  '],{type:"application/javascript"}),y=URL.createObjectURL(g),b=/*#__PURE__*/function(){function e(e,t,n,r){this.context=void 0,this.analyser=void 0,this.worklet=void 0,this.inputStream=void 0,this.context=e,this.analyser=t,this.worklet=n,this.inputStream=r}return e.create=function(t){try{var n=null,r=null;return Promise.resolve(function(o,s){try{var i=function(){function o(){return Promise.resolve(n.audioWorklet.addModule(y)).then(function(){return Promise.resolve(navigator.mediaDevices.getUserMedia({audio:{sampleRate:{ideal:t},echoCancellation:{ideal:!0}}})).then(function(t){var o=n.createMediaStreamSource(r=t),s=new AudioWorkletNode(n,"raw-audio-processor");return o.connect(i),i.connect(s),new e(n,i,s,r)})})}var s=navigator.mediaDevices.getSupportedConstraints().sampleRate,i=(n=new window.AudioContext(s?{sampleRate:t}:{})).createAnalyser(),a=function(){if(!s)return Promise.resolve(n.audioWorklet.addModule("https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js")).then(function(){})}();return a&&a.then?a.then(o):o()}()}catch(e){return s(e)}return i&&i.then?i.then(void 0,s):i}(0,function(e){var t,o;throw null==(t=r)||t.getTracks().forEach(function(e){return e.stop()}),null==(o=n)||o.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){try{return this.inputStream.getTracks().forEach(function(e){return e.stop()}),Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},e}(),w=new Blob(['\n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n\n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case "buffer":\n                this.wasInterrupted = false;\n                this.buffers.push(new Int16Array(data.buffer));\n                break;\n              case "interrupt":\n                this.wasInterrupted = true;\n                break;\n              case "clearInterrupted":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            output[i] = this.currentBuffer[this.cursor] / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: "process", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor("audio-concat-processor", AudioConcatProcessor);\n    '],{type:"application/javascript"}),k=URL.createObjectURL(w),A=/*#__PURE__*/function(){function e(e,t,n,r){this.context=void 0,this.analyser=void 0,this.gain=void 0,this.worklet=void 0,this.context=e,this.analyser=t,this.gain=n,this.worklet=r}return e.create=function(t){try{var n=null;return Promise.resolve(function(r,o){try{var s,i,a=(s=(n=new AudioContext({sampleRate:t})).createAnalyser(),(i=n.createGain()).connect(s),s.connect(n.destination),Promise.resolve(n.audioWorklet.addModule(k)).then(function(){var t=new AudioWorkletNode(n,"audio-concat-processor");return t.connect(i),new e(n,s,i,t)}))}catch(e){return o(e)}return a&&a.then?a.then(void 0,o):a}(0,function(e){var t;throw null==(t=n)||t.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){try{return Promise.resolve(this.context.close()).then(function(){})}catch(e){return Promise.reject(e)}},e}(),_=/*#__PURE__*/function(){function e(e,t,n){this.socket=void 0,this.conversationId=void 0,this.sampleRate=void 0,this.socket=e,this.conversationId=t,this.sampleRate=n}return e.create=function(t){try{var n=null;return Promise.resolve(function(r,s){try{var i,a,u,c,l=(u=null!=(i=void 0!==o?void 0:null)?i:"wss://api.elevenlabs.io",c=null!=(a=void 0!==o?void 0:null)?a:"/v1/convai/conversation?agent_id=",n=new WebSocket(t.signedUrl?t.signedUrl:u+c+t.agentId),Promise.resolve(new Promise(function(e,t){n.addEventListener("error",t),n.addEventListener("close",t),n.addEventListener("message",function(t){var n=JSON.parse(t.data);n.type&&("conversation_initiation_metadata"===n.type?e(n.conversation_initiation_metadata_event):console.warn("First received message is not conversation metadata."))},{once:!0})})).then(function(t){var r=t.conversation_id,o=parseInt(t.agent_output_audio_format.replace("pcm_",""));return new e(n,r,o)}))}catch(e){return s(e)}return l&&l.then?l.then(void 0,s):l}(0,function(e){var t;throw null==(t=n)||t.close(),e}))}catch(e){return Promise.reject(e)}},e.prototype.close=function(){this.socket.close()},e}(),P={onConnect:function(){},onDisconnect:function(){},onError:function(){},onDebug:function(){},onMessage:function(){},onStatusChange:function(){},onModeChange:function(){}},E=/*#__PURE__*/function(){function e(e,t,n,r){var o=this,s=this,i=this,a=this;this.options=void 0,this.connection=void 0,this.input=void 0,this.output=void 0,this.lastInterruptTimestamp=0,this.mode="listening",this.status="connecting",this.inputFrequencyData=void 0,this.outputFrequencyData=void 0,this.volume=1,this.endSession=function(){try{return"connected"!==s.status?Promise.resolve():(s.updateStatus("disconnecting"),s.connection.close(),Promise.resolve(s.input.close()).then(function(){return Promise.resolve(s.output.close()).then(function(){s.updateStatus("disconnected")})}))}catch(e){return Promise.reject(e)}},this.updateMode=function(e){e!==o.mode&&(o.mode=e,o.options.onModeChange({mode:e}))},this.updateStatus=function(e){e!==o.status&&(o.status=e,o.options.onStatusChange({status:e}))},this.onEvent=function(e){try{var t=JSON.parse(e.data);if(!t.type)return;switch(t.type){case"interruption":t.interruption_event&&(o.lastInterruptTimestamp=t.interruption_event.event_id),o.fadeOutAudio();break;case"agent_response":o.options.onMessage({source:"ai",message:t.agent_response_event.agent_response});break;case"user_transcript":o.options.onMessage({source:"user",message:t.user_transcription_event.user_transcript});break;case"internal_tentative_agent_response":o.options.onDebug({type:"tentative_agent_response",response:t.tentative_agent_response_internal_event.tentative_agent_response});break;case"audio":o.lastInterruptTimestamp<=t.audio_event.event_id&&(o.addAudioBase64Chunk(t.audio_event.audio_base_64),o.updateMode("speaking"));break;case"ping":o.connection.socket.send(JSON.stringify({type:"pong",event_id:t.ping_event.event_id}));break;default:o.options.onDebug(t)}}catch(t){return void o.onError("Failed to parse event data",{event:e})}},this.onInputWorkletMessage=function(e){var t,n=JSON.stringify({user_audio_chunk:(t=new Uint8Array(e.data[0].buffer),window.btoa(String.fromCharCode.apply(String,t)))});"connected"===o.status&&o.connection.socket.send(n)},this.onOutputWorkletMessage=function(e){var t=e.data;"process"===t.type&&o.updateMode(t.finished?"listening":"speaking")},this.addAudioBase64Chunk=function(e){try{return i.output.gain.gain.value=i.volume,i.output.worklet.port.postMessage({type:"clearInterrupted"}),i.output.worklet.port.postMessage({type:"buffer",buffer:function(e){for(var t=window.atob(e),n=t.length,r=new Uint8Array(n),o=0;o<n;o++)r[o]=t.charCodeAt(o);return r.buffer}(e)}),Promise.resolve()}catch(e){return Promise.reject(e)}},this.fadeOutAudio=function(){try{return a.updateMode("listening"),a.output.worklet.port.postMessage({type:"interrupt"}),a.output.gain.gain.exponentialRampToValueAtTime(1e-4,a.output.context.currentTime+2),setTimeout(function(){a.output.gain.gain.value=a.volume,a.output.worklet.port.postMessage({type:"clearInterrupted"})},2e3),Promise.resolve()}catch(e){return Promise.reject(e)}},this.onError=function(e,t){console.error(e,t),o.options.onError(e,t)},this.calculateVolume=function(e){if(0===e.length)return 0;for(var t=0,n=0;n<e.length;n++)t+=e[n]/255;return(t/=e.length)<0?0:t>1?1:t},this.getId=function(){return o.connection.conversationId},this.setVolume=function(e){o.volume=e.volume},this.getInputByteFrequencyData=function(){return null!=o.inputFrequencyData||(o.inputFrequencyData=new Uint8Array(o.input.analyser.frequencyBinCount)),o.input.analyser.getByteFrequencyData(o.inputFrequencyData),o.inputFrequencyData},this.getOutputByteFrequencyData=function(){return null!=o.outputFrequencyData||(o.outputFrequencyData=new Uint8Array(o.output.analyser.frequencyBinCount)),o.output.analyser.getByteFrequencyData(o.outputFrequencyData),o.outputFrequencyData},this.getInputVolume=function(){return o.calculateVolume(o.getInputByteFrequencyData())},this.getOutputVolume=function(){return o.calculateVolume(o.getOutputByteFrequencyData())},this.options=e,this.connection=t,this.input=n,this.output=r,this.options.onConnect({conversationId:t.conversationId}),this.connection.socket.addEventListener("message",function(e){o.onEvent(e)}),this.connection.socket.addEventListener("error",function(e){o.updateStatus("disconnected"),o.onError("Socket error",e)}),this.connection.socket.addEventListener("close",function(){o.updateStatus("disconnected"),o.options.onDisconnect()}),this.input.worklet.port.onmessage=this.onInputWorkletMessage,this.output.worklet.port.onmessage=this.onOutputWorkletMessage,this.updateStatus("connected")}return e.startSession=function(t){try{var n=v({},P,t);n.onStatusChange({status:"connecting"});var r=null,o=null,s=null;return Promise.resolve(function(i,a){try{var u=Promise.resolve(b.create(16e3)).then(function(i){return r=i,Promise.resolve(_.create(t)).then(function(t){return o=t,Promise.resolve(A.create(o.sampleRate)).then(function(t){return new e(n,o,r,s=t)})})})}catch(e){return a(e)}return u&&u.then?u.then(void 0,a):u}(0,function(e){var t,i;return n.onStatusChange({status:"disconnected"}),null==(t=o)||t.close(),Promise.resolve(null==(i=r)?void 0:i.close()).then(function(){var t;return Promise.resolve(null==(t=s)?void 0:t.close()).then(function(){throw e})})}))}catch(e){return Promise.reject(e)}},e}();const M=document.getElementById("iniciar"),S=document.getElementById("terminar"),T=document.getElementById("mensajes");function C(e,t="default"){console.log(`Agregando mensaje: "${e}" con tipo "${t}"`);let n=document.createElement("p");switch(n.textContent=e,t){case"user":n.classList.add("user");break;case"agent":n.classList.add("agent");break;case"system":n.classList.add("system");break;case"error":n.classList.add("error");break;case"tentativo":n.classList.add("tentativo");break;default:n.classList.add("default")}T.appendChild(n),T.scrollTop=T.scrollHeight}M.addEventListener("click",async()=>{try{await navigator.mediaDevices.getUserMedia({audio:!0}),console.log("Permiso de micrófono otorgado."),M.disabled=!0,S.disabled=!1,e=await E.startSession({agentId:"rhAH8UxD3uR19kPtEdmq",onConnect:()=>{console.log("Conectado al agente."),C("Conectado al agente.","system")},onDisconnect:()=>{console.log("Desconectado del agente."),C("Desconectado del agente.","system")},onMessage:e=>{if(console.log("Mensaje recibido:",e),e.isFinal){let t=T.querySelector(".tentativo");t&&(t.remove(),console.log("Mensaje tentativo eliminado.")),e.isUser?(C(`T\xfa: ${e.text}`,"user"),console.log("Mensaje de usuario agregado:",e.text)):(C(`Agente: ${e.text}`,"agent"),console.log("Mensaje del agente agregado:",e.text))}else{let t;console.log("Manejando mensaje tentativo:",e.text),(t=T.querySelector(".tentativo"))?(t.textContent=e.text,console.log("Mensaje tentativo actualizado:",t.textContent)):((t=document.createElement("p")).classList.add("tentativo"),t.textContent=e.text,T.appendChild(t),console.log("Mensaje tentativo creado:",t.textContent)),T.scrollTop=T.scrollHeight}},onError:e=>{console.error("Error en la conversación:",e),C(`Error: ${e.message||e}`,"error")},onStatusChange:e=>{console.log("Status Change:",e);let t=e.connected?"Conectado":"Desconectado",n=e.details?e.details:"Sin detalles";C(`Estado de conexi\xf3n: ${t} - ${n}`,"system")},onModeChange:e=>{console.log("Mode Change:",e);let t=e.currentMode?e.currentMode:"Desconocido";C(`Modo del agente: ${t}`,"system")}})}catch(e){console.error("Error al iniciar la conversación:",e),C(`No se pudo iniciar la conversaci\xf3n: ${e.message||e}`,"error")}}),S.addEventListener("click",async()=>{if(e)try{await e.endSession(),C("Sesión finalizada.","system"),console.log("Sesión finalizada.")}catch(e){console.error("Error al terminar la sesión:",e),C(`Error al terminar la sesi\xf3n: ${e.message||e}`,"error")}finally{M.disabled=!1,S.disabled=!0}});
//# sourceMappingURL=index.415b14a0.js.map
