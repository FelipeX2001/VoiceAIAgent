{"version":3,"file":"lib.module.js","sources":["../src/utils/audio.ts","../src/utils/rawAudioProcessor.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/utils/events.ts","../src/utils/connection.ts","../src/index.ts"],"sourcesContent":["export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","const blob = new Blob(\n  [\n    `\n      const TARGET_SAMPLE_RATE = 16000;\n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffer = []; // Initialize an empty buffer\n          this.bufferSize = TARGET_SAMPLE_RATE / 4; // Define the threshold for buffer size to be ~0.25s\n\n          if (globalThis.LibSampleRate && sampleRate !== TARGET_SAMPLE_RATE) {\n            globalThis.LibSampleRate.create(1, sampleRate, TARGET_SAMPLE_RATE).then(resampler => {\n              this.resampler = resampler;\n            });\n          }\n        }\n        process(inputs, outputs) {\n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = new Float32Array(this.buffer)\n              let pcm16Array = new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n            \n                // Scale the sample to the range [-32768, 32767] and store it in the Int16Array\n                pcm16Array[i] = sample < 0 ? sample * 32768 : sample * 32767;\n              }\n            \n              // Send the buffered data to the main script\n              this.port.postMessage([pcm16Array, maxVolume]);\n            \n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nexport class Input {\n  public static async create(sampleRate: number): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: { ideal: sampleRate },\n          echoCancellation: { ideal: true },\n        },\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n}\n","const blob = new Blob(\n  [\n    `\n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n\n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(new Int16Array(data.buffer));\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            output[i] = this.currentBuffer[this.cursor] / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\n\nexport class Output {\n  public static async create(sampleRate: number): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.connect(gain);\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","export type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    average_ping_ms?: number;\n  };\n};\n\n// TODO correction missing\nexport type SocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent;\n\nexport function isValidSocketEvent(event: any): event is SocketEvent {\n  return !!event.type;\n}\n","import { ConfigEvent, isValidSocketEvent } from \"./events\";\n\ndeclare const process: {\n  env: {\n    ELEVENLABS_CONVAI_SERVER_ORIGIN?: string;\n    ELEVENLABS_CONVAI_SERVER_PATHNAME?: string;\n  };\n};\n\nexport type SessionConfig =\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined };\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin =\n        (typeof process !== \"undefined\"\n          ? process.env.ELEVENLABS_CONVAI_SERVER_ORIGIN\n          : null) ?? WSS_API_ORIGIN;\n\n      const pathname =\n        (typeof process !== \"undefined\"\n          ? process.env.ELEVENLABS_CONVAI_SERVER_PATHNAME\n          : null) ?? WSS_API_PATHNAME;\n\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + pathname + config.agentId;\n\n      socket = new WebSocket(url);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\"error\", reject);\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const conversationId = conversationConfig.conversation_id;\n      const sampleRate = parseInt(\n        conversationConfig.agent_output_audio_format.replace(\"pcm_\", \"\")\n      );\n\n      return new Connection(socket, conversationId, sampleRate);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly sampleRate: number\n  ) {}\n\n  public close() {\n    this.socket.close();\n  }\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport { Connection, SessionConfig } from \"./utils/connection\";\nimport { isValidSocketEvent, PingEvent } from \"./utils/events\";\n\nexport type { SocketEvent } from \"./utils/events\";\nexport type { SessionConfig } from \"./utils/connection\";\n\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig & Callbacks;\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  onDisconnect: () => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onError: (message: string, context?: any) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n};\n\nconst DEFAULT_SAMPLE_RATE = 16000;\n\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onDebug: () => {},\n  onMessage: () => {},\n  onStatusChange: () => {},\n  onModeChange: () => {},\n};\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig & Partial<Callbacks>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n\n    try {\n      input = await Input.create(DEFAULT_SAMPLE_RATE);\n      connection = await Connection.create(options);\n      output = await Output.create(connection.sampleRate);\n\n      return new Conversation(fullOptions, connection, input, output);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.socket.addEventListener(\"message\", event => {\n      this.onEvent(event);\n    });\n    this.connection.socket.addEventListener(\"error\", event => {\n      this.updateStatus(\"disconnected\");\n      this.onError(\"Socket error\", event);\n    });\n    this.connection.socket.addEventListener(\"close\", () => {\n      this.updateStatus(\"disconnected\");\n      this.options.onDisconnect();\n    });\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = async () => {\n    if (this.status !== \"connected\") return;\n    this.updateStatus(\"disconnecting\");\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private onEvent = (event: MessageEvent) => {\n    try {\n      const parsedEvent = JSON.parse(event.data);\n\n      if (!isValidSocketEvent(parsedEvent)) {\n        return;\n      }\n\n      switch (parsedEvent.type) {\n        case \"interruption\": {\n          if (parsedEvent.interruption_event) {\n            this.lastInterruptTimestamp =\n              parsedEvent.interruption_event.event_id;\n          }\n          this.fadeOutAudio();\n          break;\n        }\n\n        case \"agent_response\": {\n          this.options.onMessage({\n            source: \"ai\",\n            message: parsedEvent.agent_response_event.agent_response,\n          });\n          break;\n        }\n\n        case \"user_transcript\": {\n          this.options.onMessage({\n            source: \"user\",\n            message: parsedEvent.user_transcription_event.user_transcript,\n          });\n          break;\n        }\n\n        case \"internal_tentative_agent_response\": {\n          this.options.onDebug({\n            type: \"tentative_agent_response\",\n            response:\n              parsedEvent.tentative_agent_response_internal_event\n                .tentative_agent_response,\n          });\n          break;\n        }\n\n        case \"audio\": {\n          if (\n            this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id!\n          ) {\n            this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n            this.updateMode(\"speaking\");\n          }\n          break;\n        }\n\n        case \"ping\": {\n          this.connection.socket.send(\n            JSON.stringify({\n              type: \"pong\",\n              event_id: (parsedEvent as PingEvent).ping_event.event_id,\n            })\n          );\n          // parsedEvent.ping_event.average_ping_ms can be used on client side, for\n          // example to warn if ping is too high that experience might be degraded.\n          break;\n        }\n\n        // unhandled events are expected to be internal events\n        default: {\n          this.options.onDebug(parsedEvent);\n          break;\n        }\n      }\n    } catch {\n      this.onError(\"Failed to parse event data\", { event });\n      return;\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    const audioMessage = JSON.stringify({\n      user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n      //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n    });\n    if (this.status === \"connected\") {\n      this.connection.socket.send(audioMessage);\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = async (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = async () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n}\n"],"names":["base64ToArrayBuffer","base64","binaryString","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","buffer","blob","Blob","type","rawAudioProcessor","URL","createObjectURL","Input","context","analyser","worklet","inputStream","this","create","sampleRate","Promise","resolve","_temp2","audioWorklet","addModule","then","navigator","mediaDevices","getUserMedia","audio","ideal","echoCancellation","_navigator$mediaDevic","source","createMediaStreamSource","AudioWorkletNode","connect","supportsSampleRateConstraint","getSupportedConstraints","AudioContext","createAnalyser","_temp","_catch","error","_inputStream","_context","getTracks","forEach","track","stop","close","e","reject","_proto","prototype","audioConcatProcessor","Output","gain","createGain","destination","isValidSocketEvent","event","Connection","socket","conversationId","config","origin","_ref","process","env","ELEVENLABS_CONVAI_SERVER_ORIGIN","pathname","_ref2","ELEVENLABS_CONVAI_SERVER_PATHNAME","WebSocket","signedUrl","agentId","addEventListener","message","JSON","parse","data","conversation_initiation_metadata_event","console","warn","once","conversationConfig","conversation_id","parseInt","agent_output_audio_format","replace","_socket","defaultCallbacks","onConnect","onDisconnect","onError","onDebug","onMessage","onStatusChange","onModeChange","Conversation","options","connection","input","output","_this2","_this","_this3","_this4","lastInterruptTimestamp","mode","status","inputFrequencyData","outputFrequencyData","volume","endSession","updateStatus","updateMode","onEvent","parsedEvent","interruption_event","event_id","fadeOutAudio","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","audio_event","addAudioBase64Chunk","audio_base_64","send","stringify","ping_event","_unused","onInputWorkletMessage","b","audioMessage","user_audio_chunk","btoa","String","fromCharCode","apply","onOutputWorkletMessage","finished","chunk","value","port","postMessage","exponentialRampToValueAtTime","currentTime","setTimeout","calculateVolume","frequencyData","getId","setVolume","getInputByteFrequencyData","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","onmessage","startSession","fullOptions","_extends","_Input$create","_Connection$create","_Output$create","_connection","_input","_output"],"mappings":"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"}